import telebot
from telebot import types
from config import tokenTg
from Jira_methods import *
from datetime import date
import os, glob

bot = telebot.TeleBot(tokenTg)

priorityDict = {
                '1' : 'Highest',
                '2' : 'High',
                '3' : 'Medium',
                '4' : 'Low',
                '5' : 'Lowest'
            }

class Data:
    email = ''
    password = ''
    accountId_DisplayName = []
    summary = ''
    issue_type = ''
    assigneeID_assigneName = []
    priority = ''
    date = ''

    issue_types = []
    edit = False

################################################################# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ###########################################################

@bot.message_handler(commands= 'start',content_types= 'text')
def start(message):
    bot.register_next_step_handler(message, get_email)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    
def get_email(message):
    Data.email = message.text
    bot.register_next_step_handler(message, data_verification)
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")

def data_verification(message):
    Data.password = message.text
    try:
        Data.accountId_DisplayName = authentication(Data.email, Data.password)
    except:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ.")
        bot.send_message(message.chat.id, "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        start(message)
    else:
        with open("bot\\descriptions\\" + str(message.chat.id) + ".txt", "w",encoding="utf-8") as file:
            file.write('')
        try:
            os.makedirs("bot\\descriptions\\" + str(message.chat.id) + "_attacments")
        except:
            pass
        bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup= keyboard_description())

############################################### –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –û–ü–ò–°–ê–ù–ò–Ø –ò –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–õ–û–ñ–ï–ù–ò–ô #########################################################

@bot.message_handler(content_types=['document'])
def attach_document(message):
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    src = 'bot\descriptions\\' + str(message.chat.id) + '_attacments\\' + message.document.file_name
    with open(src, 'wb') as new_file:
        new_file.write(downloaded_file)
        
@bot.message_handler(content_types=['photo'])
def attach_photo(message):
    download_file(message.chat.id, message.photo[len(message.photo)-1].file_id + '.jpg')

@bot.message_handler(content_types=['video'])
def attach_video(message):
    download_file(message.chat.id, message.video.file_id + '.mp4')

@bot.message_handler(content_types=['audio'])
def attach_audio(message):
    download_file(message.chat.id, message.audio.file_id + '.mp3')

@bot.message_handler(content_types=['text'])
def set_description(message):
    if Data.edit:
        if message.text == '!–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è':
            add_issue(message.chat.id)
        else:
            copy_description(message.text, message.chat.id)
    else:
        if message.text == '!–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É':
            bot.register_next_step_handler(message, set_summary)
            bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞–¥–∞—á–∏', reply_markup= keyboard_Cancel_issue())
        elif message.text == '!–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á–∏':
            cancel(message,False)
        else:
            copy_description(message.text, message.chat.id)

################################################### –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–ì–û–õ–û–í–ö–ê ###########################################################

def set_summary(message):
    if message.text == '!–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á–∏':
        cancel(message,False)
    else:
        Data.summary = message.text
        Data.at_me = False
        if Data.edit:
            add_issue(message.chat.id)
        else:
            set_issue_type(message.chat.id)

################################################## –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –¢–ò–ü–ê –ó–ê–î–ê–ß–ò ####################################################################

def set_issue_type(ID):
    keyboard = types.InlineKeyboardMarkup()
    Data.issue_types = get_issue_types(Data.email,Data.password)
    passed = False
    for i in range(len(Data.issue_types)):
        if passed:
            passed= False
        elif len(Data.issue_types) - i == 1:
            keyboard.add(types.InlineKeyboardButton(text=Data.issue_types[i], callback_data=Data.issue_types[i]))
        else:    
            keyboard.add(types.InlineKeyboardButton(text=Data.issue_types[i], callback_data=Data.issue_types[i]),
                types.InlineKeyboardButton(text=Data.issue_types[i + 1], callback_data=Data.issue_types[i + 1]))
            passed = True
    bot.send_message(ID,'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:', reply_markup= keyboard)

################################################### –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø ########################################################

def set_assignee(ID):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–º–µ–Ω—è', callback_data='assigneeMe'),
                 types.InlineKeyboardButton(text='–ö–æ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ', callback_data='assignee'))
    bot.send_message(ID,'–ö–æ–≥–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º?',reply_markup= keyboard)

def get_assignee(message):
    Data.assigneeID_assigneName = get_assigneeID(Data.email, Data.password, message.text)
    if len(Data.assigneeID_assigneName) > 0:
        bot.send_message(message.chat.id, '–ú—ã –≤–∞—Å –Ω–∞—à–ª–∏!!!üòéüì∏')
        if Data.edit:
            add_issue(message.chat.id)
        else:
            set_priority(message.chat.id)
    else:
        if message.text == '!–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á–∏':
            cancel(message,False)
        else:
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ωüòû')
            set_assignee(message.chat.id)

################################################## –ú–ï–¢–û–î –î–õ–Ø –£–°–¢–ê–ù–û–í–ö–ò –ü–†–ò–û–†–ò–¢–ï–¢–ê –ó–ê–î–ê–ß–ò #################################################

def set_priority(ID):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="Lowest", callback_data='5'),
                 types.InlineKeyboardButton(text="Low", callback_data='4'),
                 types.InlineKeyboardButton(text="Medium", callback_data='3'),
                 types.InlineKeyboardButton(text="High", callback_data='2'),
                 types.InlineKeyboardButton(text="Highest", callback_data='1'))
    bot.send_message(ID,'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ',reply_markup= keyboard)

###################################################### –ú–ï–¢–û–î –î–õ–Ø –£–°–¢–ê–ù–û–í–ö–ò –î–ê–¢–´ ##########################################################

def set_date(ID):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="SkipDate"),
                 types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É",callback_data="date"))
    bot.send_message(ID,'–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è?',reply_markup= keyboard)

def add_date(message):
    try:
        date_message= message.text.split(".")
        date(int(date_message[2]), int(date_message[1]), int(date_message[0]))
    except:
        if message.text == '!–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á–∏':
            cancel(message,False)
        else:
            bot.send_message(message.chat.id,'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞')
            set_date(message.chat.id)
    else:
        Data.date = message.text
        add_issue(message.chat.id)

####################################################### –ú–ï–¢–û–î –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ò –í –î–ñ–ò–†–ê ##########################################################################

def add_issue(ID):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ Jira', callback_data='Send'),
                 types.InlineKeyboardButton(text='–ù–µ—Ç, –≤—ã–±—Ä–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è', callback_data='Edit'))
    bot.send_message(ID, f'1.–¢–µ–º–∞: {Data.summary}' +
                                    f'\n2.–û–ø–∏—Å–∞–Ω–∏–µ: {read_description(ID)}' +
                                    f'\n3.–¢–∏–ø: {Data.issue_type}' +
                                    f'\n4.–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {Data.assigneeID_assigneName[1]}' +
                                    f'\n5.–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priorityDict.get(Data.priority)}' + 
                                    f'\n6.–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {Data.date}' + 
                                    f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {count_files(ID)}')
    bot.send_message(ID,"–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω–æ?", reply_markup= keyboard)

################################################### –ú–ï–¢–û–î –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò CALLBACK –î–ê–ù–ù–´–• #########################################

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data in Data.issue_types:
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                  message_id=call.message.message_id, 
                                  text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø {call.data}.')
            Data.issue_type = call.data
            if Data.edit:
                add_issue(call.message.chat.id)
            else:
                set_assignee(call.message.chat.id)

        elif call.data == 'assigneeMe':
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                  message_id=call.message.message_id, 
                                  text=f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {Data.accountId_DisplayName[1]}.')
            Data.assigneeID_assigneName = Data.accountId_DisplayName
            if Data.edit:
                add_issue(call.message.chat.id)
            else:
                set_priority(call.message.chat.id)
        elif call.data == 'assignee':
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                  message_id=call.message.message_id, 
                                  text='–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.')
            bot.register_next_step_handler(call.message,get_assignee)

        elif call.data.isnumeric():
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                  message_id=call.message.message_id, 
                                  text=f'–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priorityDict.get(call.data)}.')
            Data.priority = call.data
            if Data.edit:
                add_issue(call.message.chat.id)
            else:
                set_date(call.message.chat.id)

        elif call.data == 'SkipDate':
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                  message_id=call.message.message_id, 
                                  text='–ë–µ–∑ –¥–∞—Ç—ã')
            Data.date = '–ë–µ–∑ –¥–∞—Ç—ã'
            add_issue(call.message.chat.id)
        elif call.data == 'date':
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                  message_id=call.message.message_id, 
                                  text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
            bot.register_next_step_handler(call.message,add_date)

        elif call.data == 'Send':
            bot.edit_message_text(chat_id= call.message.chat.id,
                                  message_id=call.message.message_id, 
                                  text="–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Jira")
            issue = create_issue(Data.email, Data.password, Data.summary, read_description(call.message.chat.id),
                                 Data.issue_type, Data.priority, Data.date.split('.'), Data.assigneeID_assigneName[0])
            send_attachments(call.message.chat.id,issue)
            cancel(call.message, True)
            bot.send_message(call.message.chat.id, "–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ Jira",reply_markup= keyboard_description())

        elif call.data == 'Edit':
            bot.edit_message_text(chat_id= call.message.chat.id, 
                                  message_id=call.message.message_id, 
                                  text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞")
            bot.edit_message_reply_markup(call.message.chat.id, message_id= call.message.message_id, reply_markup= keyboard_edit_element())
            Data.edit = True

        elif call.data == 'EditSummary':
            bot.edit_message_reply_markup(call.message.chat.id, message_id= call.message.message_id, reply_markup= None)
            bot.register_next_step_handler(call.message, set_summary)
            bot.send_message(call.message.chat.id,'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞–¥–∞—á–∏')
        elif call.data == 'EditDescription':
            bot.edit_message_reply_markup(call.message.chat.id, message_id= call.message.message_id, reply_markup= None)
            delete_description(call.message.chat.id)
            bot.register_next_step_handler(call.message, set_description)
            bot.send_message(call.message.chat.id,
                             '–≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \n!–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è',
                             reply_markup= keyboard_edit_description())
        elif call.data == 'EditTypeIssue':
            bot.edit_message_reply_markup(call.message.chat.id, message_id= call.message.message_id, reply_markup= None)
            set_issue_type(call.message.chat.id)
        elif call.data == 'EditAssignee':
            bot.edit_message_reply_markup(call.message.chat.id, message_id= call.message.message_id, reply_markup= None)
            set_assignee(call.message.chat.id)
        elif call.data == 'EditPriority':
            bot.edit_message_reply_markup(call.message.chat.id, message_id= call.message.message_id, reply_markup= None)
            set_priority(call.message.chat.id)
        elif call.data == 'EditDate':
            bot.edit_message_reply_markup(call.message.chat.id, message_id= call.message.message_id, reply_markup= None)
            set_date(call.message.chat.id)
        elif call.data == 'back':
            bot.edit_message_reply_markup(call.message.chat.id, message_id= call.message.message_id, reply_markup= None)
            add_issue(call.message.chat.id)
            
######################################################### –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ########################################################

def count_files(id):
    result = len(glob.glob('bot\\descriptions\\' + str(id) + '_attacments\\*'))
    return str(result)


def keyboard_Cancel_issue():
    markup_reply = types.ReplyKeyboardMarkup(one_time_keyboard = False, resize_keyboard = True)
    markup_reply.add(types.KeyboardButton(text = '!–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á–∏'))
    return markup_reply

def keyboard_edit_element():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–¢–µ–º–∞', callback_data='EditSummary'),
                 types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data='EditDescription'),
                 types.InlineKeyboardButton(text='–¢–∏–ø', callback_data='EditTypeIssue'),
                 types.InlineKeyboardButton(text='–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', callback_data='EditAssignee'),
                 types.InlineKeyboardButton(text='–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', callback_data='EditPriority'),
                 types.InlineKeyboardButton(text='–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', callback_data='EditDate'))
    keyboard.add(types.InlineKeyboardButton(text='–û–±—Ä–∞—Ç–Ω–æ', callback_data='back'))
    return keyboard

def keyboard_edit_description():
    markup_reply = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True)
    markup_reply.add(types.KeyboardButton(text = '!–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è'))
    return markup_reply

def keyboard_description():
    markup_reply = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True)
    item_add_issue = types.KeyboardButton(text = '!–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
    item_cancel_issue = types.KeyboardButton(text = '!–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á–∏')

    markup_reply.add(item_add_issue,item_cancel_issue)
    return markup_reply

def copy_description(msg, id):
    with open("bot\\descriptions\\" + str(id) + ".txt", "a",encoding="utf-8") as file:
        file.write(msg + "\n")

def delete_description(id):   
    with open("bot\\descriptions\\" + str(id) + ".txt", "w",encoding="utf-8") as file:    
        file.write('')

def delete_files(id):
    files = glob.glob('bot\\descriptions\\' + str(id) + '_attacments\\*')
    for f in files:
        os.remove(f)

def send_attachments(ID,issue):
    filesList=[]
    pathList=[]
    files = glob.glob('bot\\descriptions\\' + str(ID) + '_attacments\\*')
    for f in files:
        filesList.append(os.path.basename(f))
        pathList.append(f)
    for i in range(len(filesList)):
        add_attachments(Data.email, Data.password, issue, filesList[i], pathList[i])

def download_file(ID,file):
    file_info = bot.get_file(file.split('.')[0])
    downloaded_file = bot.download_file(file_info.file_path)
    src = 'bot\descriptions\\' + str(ID) + '_attacments\\' + file
    with open(src, 'wb') as new_file:
        new_file.write(downloaded_file)

def read_description(id):
    with open("bot\\descriptions\\" + str(id) + ".txt", "r",encoding="utf-8") as file:
        return file.read()[:-1]

def cancel(message,send):
    Data.summary = ''
    delete_description(message.chat.id)
    delete_files(message.chat.id)
    Data.issue_type = ''
    Data.assigneeID_assigneName = []
    Data.priority = ''
    Data.date = ''
    Data.edit = False
    try:
        bot.edit_message_reply_markup(message.chat.id, message_id= message.message_id-1, reply_markup= None)
    except:
        pass
    if not send:
        bot.send_message(message.chat.id, '–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup= keyboard_description())

bot.polling(none_stop=True, interval=0,)